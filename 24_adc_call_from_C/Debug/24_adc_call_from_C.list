
24_adc_call_from_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  000013d0  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  000013d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003d0  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003cc  080003cc  000013cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000013d0  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000055a  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000005b  00000000  00000000  0000195a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000012a  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000000c9  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000068  00000000  00000000  00001ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c3e  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000002c  00000000  00000000  0000584e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00000f70  00000000  00000000  0000587a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000067ea  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000058  00000000  00000000  00006830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080003b0 	.word	0x080003b0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	080003b0 	.word	0x080003b0

080001c4 <clock_init>:
.globl led_on
.globl clock_init

clock_init:
	// Lets use MSI
	ldr r0,=RCC_CFGR
 80001c4:	4840      	ldr	r0, [pc, #256]	@ (80002c8 <stop+0x2>)
	ldr r1,[r0]
 80001c6:	6801      	ldr	r1, [r0, #0]
	and r1,#RCC_CFGR_SW_MSI
 80001c8:	f021 0103 	bic.w	r1, r1, #3
	str r1,[r0]
 80001cc:	6001      	str	r1, [r0, #0]

080001ce <clock_wait>:

	// Wait for source to be updated
clock_wait:
	ldr r1,[r0]
 80001ce:	6801      	ldr	r1, [r0, #0]
	and r1,#RCC_CFGR_SWS
 80001d0:	f001 010c 	and.w	r1, r1, #12

	// 0x0 means MSI as the clock source
	cmp r1,#00
 80001d4:	2900      	cmp	r1, #0
	bne clock_wait
 80001d6:	d1fa      	bne.n	80001ce <clock_wait>

	// Configure MSI
	ldr r0,=RCC_CR
 80001d8:	483c      	ldr	r0, [pc, #240]	@ (80002cc <stop+0x6>)
	ldr r1,[r0]
 80001da:	6801      	ldr	r1, [r0, #0]

	orr r1,#RCC_CR_MSIRGSEL_CR
 80001dc:	f041 0108 	orr.w	r1, r1, #8
	and r1,#RCC_CR_MSIRANGE_RESET
 80001e0:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
	orr r1,#RCC_CR_MSIRANGE_16MHZ
 80001e4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80

	str r1,[r0]
 80001e8:	6001      	str	r1, [r0, #0]
	bx lr
 80001ea:	4770      	bx	lr

080001ec <adc_init>:

adc_init:
	// 1. Enable PCLK to ADC pins GPIO
	ldr r0,=RCC_AHB2_ENR
 80001ec:	4838      	ldr	r0, [pc, #224]	@ (80002d0 <stop+0xa>)
	ldr r1,[r0]
 80001ee:	6801      	ldr	r1, [r0, #0]
	orr r1,#GPIO_A_EN
 80001f0:	f041 0101 	orr.w	r1, r1, #1
	str r1,[r0]
 80001f4:	6001      	str	r1, [r0, #0]
	// 2. Set ADC pin to analog mode (PA1) [This is the default, just for completeness sake]
	ldr r0,=GPIO_A_MODER
 80001f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	ldr r1,[r0]
 80001fa:	6801      	ldr	r1, [r0, #0]
	and r1,#MODER_1_RESET
 80001fc:	f021 010c 	bic.w	r1, r1, #12
	orr r1,#MODER_1_OUT_ANALOG
 8000200:	f041 010c 	orr.w	r1, r1, #12
	str r1,[r0]
 8000204:	6001      	str	r1, [r0, #0]
	// 3. Enable PCLK to ADC
	ldr r0,=RCC_AHB2_ENR
 8000206:	4832      	ldr	r0, [pc, #200]	@ (80002d0 <stop+0xa>)
	ldr r1,[r0]
 8000208:	6801      	ldr	r1, [r0, #0]
	orr r1,#ADC_PCLK_EN
 800020a:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
	str r1,[r0]
 800020e:	6001      	str	r1, [r0, #0]

	// 3.1 Clear DEEPPWD bit
	ldr r0,=ADC_CR
 8000210:	4830      	ldr	r0, [pc, #192]	@ (80002d4 <stop+0xe>)
	ldr r1,[r0]
 8000212:	6801      	ldr	r1, [r0, #0]
	and r1,#ADC_CR_DEEPPWD
 8000214:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
	str r1,[r0]
 8000218:	6001      	str	r1, [r0, #0]
	// 3.2 Set ADVREGEN to enable ADC voltage regulator
	ldr r0,=ADC_CR
 800021a:	482e      	ldr	r0, [pc, #184]	@ (80002d4 <stop+0xe>)
	ldr r1,[r0]
 800021c:	6801      	ldr	r1, [r0, #0]
	orr r1,#ADC_CR_ADVREGEN
 800021e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
	str r1,[r0]
 8000222:	6001      	str	r1, [r0, #0]

	ldr r0, =0x50000
 8000224:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000

08000228 <delay_loop>:
	delay_loop:
	subs r0, r0, #1
 8000228:	3801      	subs	r0, #1
	bne delay_loop
 800022a:	d1fd      	bne.n	8000228 <delay_loop>

	// 4. Select software trigger for conversion [EXTEN defaults to hardware trigger detection disabled]
	// 5. Set conversion sequence starting channel
	ldr r0,=ADC_SQR1
 800022c:	482a      	ldr	r0, [pc, #168]	@ (80002d8 <stop+0x12>)
	ldr r1,[r0]
 800022e:	6801      	ldr	r1, [r0, #0]
	and r1,#ADC_SQR_L_CLEAR	// Clear L
 8000230:	f021 010f 	bic.w	r1, r1, #15
	and r1,#ADC_SQ1_CLEAR	// Clear SQ1
 8000234:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
	orr r1,#ADC_SQ1			// Set SQ1
 8000238:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
	str r1,[r0]
 800023c:	6001      	str	r1, [r0, #0]
	// 6. Set conversion sequence length. Defaults to 0000 => 1 conversion [Reset in step 5 anyway]
	// Clear the ADRDY bit in ADC_ISR by writing 1
	ldr r0,=ADC1_ISR
 800023e:	4827      	ldr	r0, [pc, #156]	@ (80002dc <stop+0x16>)
	ldr r1,[r0]
 8000240:	6801      	ldr	r1, [r0, #0]
	orr r1,#1 // ADC_ISR_ADRDY
 8000242:	f041 0101 	orr.w	r1, r1, #1
	str r1,[r0]
 8000246:	6001      	str	r1, [r0, #0]
	// 7. Enable ADC module
	ldr r0,=ADC_CR
 8000248:	4822      	ldr	r0, [pc, #136]	@ (80002d4 <stop+0xe>)
	ldr r1,[r0]
 800024a:	6801      	ldr	r1, [r0, #0]
	orr r1,#ADC_ENABLE
 800024c:	f041 0101 	orr.w	r1, r1, #1
	str r1,[r0]
 8000250:	6001      	str	r1, [r0, #0]

	// Wait till ADRDY flag is set, XXX it is never set, there is a bug somewhere here
	ldr r0,=ADC1_ISR
 8000252:	4822      	ldr	r0, [pc, #136]	@ (80002dc <stop+0x16>)

08000254 <enable_loop>:
enable_loop:
	ldr r1,[r0]
 8000254:	6801      	ldr	r1, [r0, #0]
	and r1,#ADC_ISR_ADRDY
 8000256:	f001 0101 	and.w	r1, r1, #1

	cmp r1,#01
 800025a:	2901      	cmp	r1, #1
	bne enable_loop
 800025c:	d1fa      	bne.n	8000254 <enable_loop>

	ldr r0,=ADC1_ISR
 800025e:	481f      	ldr	r0, [pc, #124]	@ (80002dc <stop+0x16>)
	ldr r1,[r0]
 8000260:	6801      	ldr	r1, [r0, #0]
	and r1,#ADC_ISR_ADRDY
 8000262:	f001 0101 	and.w	r1, r1, #1
	str r1,[r0]
 8000266:	6001      	str	r1, [r0, #0]

	bx lr
 8000268:	4770      	bx	lr

0800026a <adc_read>:

adc_read:
	// 1. Start conversion
	ldr r0,=ADC_CR
 800026a:	481a      	ldr	r0, [pc, #104]	@ (80002d4 <stop+0xe>)
	ldr r1,[r0]
 800026c:	6801      	ldr	r1, [r0, #0]
	orr r1,#ADC_CR_ADSTART
 800026e:	f041 0104 	orr.w	r1, r1, #4
	str r1,[r0]
 8000272:	6001      	str	r1, [r0, #0]

08000274 <read_loop>:
	// 2. Wait for completion
	read_loop:
		ldr r0,=ADC_CSR
 8000274:	481a      	ldr	r0, [pc, #104]	@ (80002e0 <stop+0x1a>)
		ldr r1,[r0]
 8000276:	6801      	ldr	r1, [r0, #0]
		and r1,#ADC_CSR_EOCMST
 8000278:	f001 0108 	and.w	r1, r1, #8

		cmp r1,#0x00
 800027c:	2900      	cmp	r1, #0
		beq read_loop
 800027e:	d0f9      	beq.n	8000274 <read_loop>

	// 3. Read contents of ADC register
	ldr r2,=ADC_CDR
 8000280:	4a18      	ldr	r2, [pc, #96]	@ (80002e4 <stop+0x1e>)
	ldr r0,[r0]
 8000282:	6800      	ldr	r0, [r0, #0]
	bx lr
 8000284:	4770      	bx	lr

08000286 <led_init>:

led_init:
	ldr r0,=RCC_AHB2_ENR
 8000286:	4812      	ldr	r0, [pc, #72]	@ (80002d0 <stop+0xa>)
	ldr r1,[r0]
 8000288:	6801      	ldr	r1, [r0, #0]
	orr r1,#GPIO_A_EN
 800028a:	f041 0101 	orr.w	r1, r1, #1
	str r1,[r0]
 800028e:	6001      	str	r1, [r0, #0]

	// Set PA5 as output
	ldr r0,=GPIO_A_MODER
 8000290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	ldr r1,[r0]
 8000294:	6801      	ldr	r1, [r0, #0]
	and r1,#MODER_5_RESET
 8000296:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
	orr r1,#MODER_5_OUT
 800029a:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
	str r1,[r0]
 800029e:	6001      	str	r1, [r0, #0]
	bx lr
 80002a0:	4770      	bx	lr

080002a2 <led_control>:

led_control:
	ldr r1,=SENS_THRESH
 80002a2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
	cmp r0,r1
 80002a6:	4288      	cmp	r0, r1
	bgt	led_on
 80002a8:	f300 8008 	bgt.w	80002bc <led_on>
	blt	led_off
 80002ac:	f2c0 8001 	blt.w	80002b2 <led_off>
	bx 	lr
 80002b0:	4770      	bx	lr

080002b2 <led_off>:

led_off:
	ldr r5,=GPIO_A_BSRR
 80002b2:	4d0d      	ldr	r5, [pc, #52]	@ (80002e8 <stop+0x22>)
	mov r1,#GPIO_A5_BSRR_LOW
 80002b4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
	str r1,[r5]
 80002b8:	6029      	str	r1, [r5, #0]
	bx lr
 80002ba:	4770      	bx	lr

080002bc <led_on>:

led_on:
	ldr r5,=GPIO_A_BSRR
 80002bc:	4d0a      	ldr	r5, [pc, #40]	@ (80002e8 <stop+0x22>)
	mov r1,#GPIO_A5_BSRR_HIGH
 80002be:	f04f 0120 	mov.w	r1, #32
	str r1,[r5]
 80002c2:	6029      	str	r1, [r5, #0]
	bx lr
 80002c4:	4770      	bx	lr

080002c6 <stop>:

stop:
	b stop
 80002c6:	e7fe      	b.n	80002c6 <stop>
	ldr r0,=RCC_CFGR
 80002c8:	40021008 	.word	0x40021008
	ldr r0,=RCC_CR
 80002cc:	40021000 	.word	0x40021000
	ldr r0,=RCC_AHB2_ENR
 80002d0:	4002104c 	.word	0x4002104c
	ldr r0,=ADC_CR
 80002d4:	50040008 	.word	0x50040008
	ldr r0,=ADC_SQR1
 80002d8:	50040030 	.word	0x50040030
	ldr r0,=ADC1_ISR
 80002dc:	50040000 	.word	0x50040000
		ldr r0,=ADC_CSR
 80002e0:	50040300 	.word	0x50040300
	ldr r2,=ADC_CDR
 80002e4:	5004030c 	.word	0x5004030c
	ldr r5,=GPIO_A_BSRR
 80002e8:	48000018 	.word	0x48000018

080002ec <main>:
extern void led_init(void);
extern void led_control(void);

uint32_t val;

int main() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	clock_init();
 80002f0:	f7ff ff68 	bl	80001c4 <clock_init>
	led_init();
 80002f4:	f7ff ffc7 	bl	8000286 <led_init>
	adc_init();
 80002f8:	f7ff ff78 	bl	80001ec <adc_init>

	while (1) {
		val = adc_read();
 80002fc:	f7ff ffb5 	bl	800026a <adc_read>
 8000300:	4603      	mov	r3, r0
 8000302:	4a03      	ldr	r2, [pc, #12]	@ (8000310 <main+0x24>)
 8000304:	6013      	str	r3, [r2, #0]
		led_control();
 8000306:	f7ff ffcc 	bl	80002a2 <led_control>
		val = adc_read();
 800030a:	bf00      	nop
 800030c:	e7f6      	b.n	80002fc <main+0x10>
 800030e:	bf00      	nop
 8000310:	2000001c 	.word	0x2000001c

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	@ (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	@ (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	@ (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	@ (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	@ (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ffd1 	bl	80002ec <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	20000020 	.word	0x20000020

08000364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC1_2_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	@ (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	@ (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	@ (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	@ (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

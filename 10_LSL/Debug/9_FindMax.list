
9_FindMax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000128  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ac  080002b4  000012b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ac  080002ac  000012b4  2**0
                  CONTENTS
  4 .ARM          00000000  080002ac  080002ac  000012b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002ac  080002b4  000012b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000012b4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000d1  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000053  00000000  00000000  000013b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000054  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00001498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000006f  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000294 	.word	0x08000294

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000294 	.word	0x08000294

080001c4 <mydata>:
 80001c4:	00000045 	.word	0x00000045
 80001c8:	00000057 	.word	0x00000057
 80001cc:	00000056 	.word	0x00000056
 80001d0:	0000002d 	.word	0x0000002d
 80001d4:	0000004b 	.word	0x0000004b

080001d8 <__main>:

.section .text
.globl __main // So startup file sees the function

__main:
	mov count,#5
 80001d8:	f04f 0005 	mov.w	r0, #5
	mov max, #0
 80001dc:	f04f 0100 	mov.w	r1, #0

	// Load mem address of mydata into r2
	ldr	pointer,=mydata
 80001e0:	4a04      	ldr	r2, [pc, #16]	@ (80001f4 <stop+0x2>)

080001e2 <compare>:
compare:
	// load value at mem address found in r2[pointer] into r3[next]
	ldr next, [pointer]
 80001e2:	6813      	ldr	r3, [r2, #0]

	// compare max with r3[next] and update condition flags
	cmp max, next
 80001e4:	4299      	cmp	r1, r3

	// branch to ctnu if max is equal or greater than r3[next]
	bhs loop_continue
 80001e6:	d200      	bcs.n	80001ea <loop_continue>

	mov max, next
 80001e8:	4619      	mov	r1, r3

080001ea <loop_continue>:

loop_continue:
	// Move pointer along to point to the next element
	add pointer, pointer, #4
 80001ea:	f102 0204 	add.w	r2, r2, #4

	// Subtract, store and update flags ('s)
	subs count, count, #1
 80001ee:	3801      	subs	r0, #1

	bne compare
 80001f0:	d1f7      	bne.n	80001e2 <compare>

080001f2 <stop>:

stop:
	b stop
 80001f2:	e7fe      	b.n	80001f2 <stop>
	ldr	pointer,=mydata
 80001f4:	080001c4 	.word	0x080001c4

080001f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f8:	480d      	ldr	r0, [pc, #52]	@ (8000230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000200:	480c      	ldr	r0, [pc, #48]	@ (8000234 <LoopForever+0x6>)
  ldr r1, =_edata
 8000202:	490d      	ldr	r1, [pc, #52]	@ (8000238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000204:	4a0d      	ldr	r2, [pc, #52]	@ (800023c <LoopForever+0xe>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000208:	e002      	b.n	8000210 <LoopCopyDataInit>

0800020a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800020c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020e:	3304      	adds	r3, #4

08000210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000214:	d3f9      	bcc.n	800020a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000216:	4a0a      	ldr	r2, [pc, #40]	@ (8000240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000218:	4c0a      	ldr	r4, [pc, #40]	@ (8000244 <LoopForever+0x16>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800021c:	e001      	b.n	8000222 <LoopFillZerobss>

0800021e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000220:	3204      	adds	r2, #4

08000222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000224:	d3fb      	bcc.n	800021e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000226:	f000 f811 	bl	800024c <__libc_init_array>
/* Call the application's entry point.*/
  bl __main
 800022a:	f7ff ffd5 	bl	80001d8 <__main>

0800022e <LoopForever>:

LoopForever:
  b LoopForever
 800022e:	e7fe      	b.n	800022e <LoopForever>
  ldr   r0, =_estack
 8000230:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800023c:	080002b4 	.word	0x080002b4
  ldr r2, =_sbss
 8000240:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000244:	2000001c 	.word	0x2000001c

08000248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC1_2_IRQHandler>
	...

0800024c <__libc_init_array>:
 800024c:	b570      	push	{r4, r5, r6, lr}
 800024e:	4d0d      	ldr	r5, [pc, #52]	@ (8000284 <__libc_init_array+0x38>)
 8000250:	4c0d      	ldr	r4, [pc, #52]	@ (8000288 <__libc_init_array+0x3c>)
 8000252:	1b64      	subs	r4, r4, r5
 8000254:	10a4      	asrs	r4, r4, #2
 8000256:	2600      	movs	r6, #0
 8000258:	42a6      	cmp	r6, r4
 800025a:	d109      	bne.n	8000270 <__libc_init_array+0x24>
 800025c:	4d0b      	ldr	r5, [pc, #44]	@ (800028c <__libc_init_array+0x40>)
 800025e:	4c0c      	ldr	r4, [pc, #48]	@ (8000290 <__libc_init_array+0x44>)
 8000260:	f000 f818 	bl	8000294 <_init>
 8000264:	1b64      	subs	r4, r4, r5
 8000266:	10a4      	asrs	r4, r4, #2
 8000268:	2600      	movs	r6, #0
 800026a:	42a6      	cmp	r6, r4
 800026c:	d105      	bne.n	800027a <__libc_init_array+0x2e>
 800026e:	bd70      	pop	{r4, r5, r6, pc}
 8000270:	f855 3b04 	ldr.w	r3, [r5], #4
 8000274:	4798      	blx	r3
 8000276:	3601      	adds	r6, #1
 8000278:	e7ee      	b.n	8000258 <__libc_init_array+0xc>
 800027a:	f855 3b04 	ldr.w	r3, [r5], #4
 800027e:	4798      	blx	r3
 8000280:	3601      	adds	r6, #1
 8000282:	e7f2      	b.n	800026a <__libc_init_array+0x1e>
 8000284:	080002ac 	.word	0x080002ac
 8000288:	080002ac 	.word	0x080002ac
 800028c:	080002ac 	.word	0x080002ac
 8000290:	080002b0 	.word	0x080002b0

08000294 <_init>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	bf00      	nop
 8000298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029a:	bc08      	pop	{r3}
 800029c:	469e      	mov	lr, r3
 800029e:	4770      	bx	lr

080002a0 <_fini>:
 80002a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002a2:	bf00      	nop
 80002a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002a6:	bc08      	pop	{r3}
 80002a8:	469e      	mov	lr, r3
 80002aa:	4770      	bx	lr
